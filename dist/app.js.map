{"version":3,"sources":["../app.js"],"names":["mongo_url","mongo_dbname","app","validator","Validator","allErrors","validate","use","bodyParser","json","express","client","MongoClient","useNewUrlParser","connect","then","Client","NEUP_fix","db","announcement","collection","user_info","get","req","res","find","toArray","error","result","pass_result","map","single_ann","_id","text","image","post","body","schema","announcement_post_body","insertOne","reason","status","end","deleteOne","params","annid","delete_result","deletedCount","patch","announcement_update_body","updateOne","$set","nModified","query","userId_get_query","userid","length","data_wait_for_send","item","push","name","avatar","signature","put","userId_put_body","err","next","ValidationError","send","listen"],"mappings":"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","sourcesContent":["import \"@babel/runtime/regenerator\"\nimport express from 'express';\nimport {MongoClient, ObjectID} from 'mongodb';\nimport bodyParser from \"body-parser\";\nimport {Validator, ValidationError} from 'express-json-validator-middleware'\nimport schema from './validate_schema'\n\nconst mongo_url = 'mongodb://39.106.73.59:443/';\nconst mongo_dbname = 'NEUP_fix';\n\nconst app = express();\nconst validator = new Validator({allErrors: true});\n\nconst validate = validator.validate;\napp.use(bodyParser.json());\napp.use(\"/\", express.static(\"client-example\"));\nconst client = new MongoClient(mongo_url, {useNewUrlParser: true});\n\nclient.connect().then((Client) => {\n    const NEUP_fix = Client.db(mongo_dbname);\n    const announcement = NEUP_fix.collection(\"announcement\");\n    const user_info = NEUP_fix.collection(\"user_info\");\n    app.get('/announcement', (req, res) => {\n        announcement.find({}).toArray(((error, result) => {\n            let pass_result = result.map((single_ann) => {\n                return {\"annid\": single_ann._id, \"text\": single_ann.text, \"image\": single_ann.image}\n            });\n            res.json(pass_result);\n        }))\n    });\n    app.post('/announcement', validate({body: schema.announcement_post_body}), ((req, res) => {\n        announcement.insertOne(req.body).catch((reason => {\n            throw reason;\n        }));// TODO: add result judgement.加一个萌萌哒夹击妹抖\n        res.status(200).end();\n    }));\n    app.delete('/announcement/:annid', (req, res) => {\n        announcement.deleteOne({\"_id\": ObjectID(req.params.annid)}).then((delete_result) => {\n            if (delete_result.deletedCount === 1) {\n                res.status(200).end(\"delete successful.\");\n            } else {\n                res.status(410).end(\"no such announcement.\")\n            }\n        }).catch(reason => {\n            throw reason\n        });\n    });\n    app.patch('/announcement/:annid', validate({body: schema.announcement_update_body}), (req, res) => {\n        announcement.updateOne({\"_id\": ObjectID(req.params.annid)}, {$set: req.body}).then((result) => {\n            if (result.result.nModified === 1) {\n                res.status(200).end(\"update successful\")\n            } else {\n                res.status(410).end(\"target not found\")\n            }\n        })\n    });\n\n    app.get('/user', validate({query: schema.userId_get_query}), (req, res) => {\n        user_info.find({userid: req.query.userid}).toArray((error, result) => {\n            if (result.length === 0) {\n                res.status(410).end('no such user.')\n            } else {\n                let data_wait_for_send = [];\n                for (let item of result) {\n                    data_wait_for_send.push({\n                        userid: item.userid,\n                        name: item.name,\n                        avatar: item.avatar,\n                        signature: item.signature\n                    })\n                }\n                res.json(data_wait_for_send);\n            }\n\n        })\n    });\n    app.put('/user', validate({query: schema.userId_get_query, body: schema.userId_put_body}), (req, res) => {\n        user_info.updateOne({userid: req.query.userid}, {$set: req.body}).then((result) => {\n            if (result.result.nModified === 1) {\n                res.status(200).end(\"update successful.\")\n            } else {\n                res.status(410).end('no such user')\n            }\n        })\n    });\n    // app.get()\n    app.use((err, req, res, next) => {\n        if (err instanceof ValidationError) {\n            // At this point you can execute your error handling code\n            res.status(400).send('invalid request data.');\n            next();\n        } else next(err); // pass error on if not a validation error\n    });\n});\n\napp.listen(8080);\n"],"file":"app.js"}